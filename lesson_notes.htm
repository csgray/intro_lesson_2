    <!DOCTYPE HTML>
<html lang="en">

  <!--20151215: Udacity, Intro to Programming, Lesson 1-->
  <!--20160108: Lesson 2 Update-->

<head>
  <title>CSGray's Notes from Intro to Programming</title>
  <link rel="stylesheet" href="style.css">
</head>

<body>
  <article class="category">
    <h1 class="heading">Basics of the Web</h1>

    <section class="section">
      <h2 class="subheading">The Internet</h2>
        <p class="text">The internet is a network of computers communicating
         with each other through the use of HTTP requests. Client computers
         request <em>HTML</em> documents from web servers &lpar;any computer
         hosting a file can be a server though "servers" usually refer to
         dedicated platforms&rpar; through the internet. The server sends the
         HTML file to the client computer where a browser interprets and
         displays the file. </p>
        <p class="text">Most Alaskans know that the internet is not a series
         of tubes.</p>
    </section>

    <section class="section">
      <h2 class="subheading">Code</h2>
        <p class="text">Code is instructions written in a language that
         computers can understand. Programmers interpret what the humans want
         computers to do so that computers can then execute the instructions.
    </section>

    <section class="section">
      <h2 class="subheading">"Stupid" Computers</h2>
        <p class="text">Computers interpret code literally and will do
          exactly what they are told. They cannot deduce what you meant for
          them to do, so errant instructions &lpar;"bugs" in the code&rpar; 
          wreak havoc on websites and programs.</p>
    </section>
  </article>

  <article class="category">
    <h1 class="heading">HTML</h1>
      <p class="text">Websites are text documents written in HTML. "HTML" is
       short for "HyperText Markup Language." A "language" consists of syntax
       + rules. The information on a website is its "content" while the
       formatting is done with "markup" using <em>elements</em> and <em>tags
       </em>. HTML tells the browser what kind of content is on the page:
       text, image, etc. Webpages with the same HTML can look different
       because of the style applied to them.</p>

    <section class="section">
      <h2 class="subheading">Document Object Model</h2>
        <p class="text">DOM is the tree-like structure of HTML which sees
         elements as boxes within boxes within boxes. This compartmentalizing
         of the elements of a website enables programs to access and change
         parts of the website without altering the other parts. Elements and
         tags are the basic components of the tree structure.</p>

        <p class="text">Elements are related to each other vertically as
          "parents" and "children" or laterally as "siblings." Children are
          nested within their parents, and siblings have the same parent
          element. Most child elements are the parents of other elements and
          vice versa. This gives the DOM its "tree-like" structure because
          the child elements branch off from their parents, then their child
          elements branch off from them, and so on.</p>

        <p class="text">Here is a diagram of the DOM of <a href=
          "http://assignments.udacity-extras.appspot.com/courses/html-css/samples/explore.html">
          this sample page:</a></p>

        <img class="image" src=
        "http://s30.postimg.org/m3egmiga9/DOM_diagram.png" alt="Diagram of a
        Sample DOM" title="Diagram of a Sample DOM">

        <p class="text">This shows that the "head" and "body" elements are
          children of the "html" element and branch off from it. "Head" and
          "body" are siblings. The "body" element has two children of its
          own: "h1" and "div". Those both branch off of their parent, so
          they are siblings, and both have children of their own. And so on.
        </p>

        <p class="text">Programmers can move vertically or laterally along
          the DOM. Their code can follow the parent-child relationships to
          access different elements. This is the basis of inheritance: The
          children of a parent element will have that elements' properties
          unless their code supersedes it. For example: The "font" property
          on the "body" element of this webpage is "Times New Roman". That
          means that the font property of all the children elements is also
          Times New Roman without having to set that property for each
          element. However, the blue background of the body element is
          superseded by code in the child elements that says to have a white
          background.</p>
    </section>

    <section class="section">
      <h2 class="subheading">Simple Structure</h2>
        <p class="text">Division: &lt;div class="example"&gt;content&lt;/div
          &gt; - Applies the "example" class to everything within this
          document division.<br>
          Span: &lt;span class="example"&gt;content&lt;/span&gt; - Applies
          the "example" class to everything within this line section.</p>
    </section>

    <section class="section">
      <h2 class="subheading">Semantic Structure</h2>
        <p class="text">HTML5 introduced semantic elements that describe the
          content that they contain. They compartmentalize things like "div"
          or "span" but mean something as well. <a href=
          "http://www.w3schools.com/html/html5_semantic_elements.asp">Look
          here for more information.</a> The following are the semantic
          elements listed on that page:
        </p>

        <table>
          <tr>
            <td>&lt;article&gt;</td>
            <td>Defines an article</td>
          </tr>
          <tr>
            <td>&lt;aside&gt;</td>
            <td>Defines content aside from the page content</td>
          </tr>
          <tr>
            <td>&lt;details&gt;</td>
            <td>Defines additional details that the user can view or hide
            </td>
          </tr>
          <tr>
            <td>&lt;figcaption&gt;</td>
            <td>Defines a caption for a &lt;figure&gt; element</td>
          </tr>
          <tr>
            <td>&lt;figure&gt;</td>
            <td>Specifies self-contained content, like illustrations,
              diagrams, photos, code listings, etc.</td>
          </tr>
          <tr>
            <td>&lt;footer&gt;</td>
            <td>Defines a footer for a document or section</td>
          </tr>
          <tr>
            <td>&lt;header&gt;</td>
            <td>Specifies a header for a document or section</td>
          </tr>
          <tr>
            <td>&lt;main&gt;</td>
            <td>Specifies the main content of a document</td>
          </tr>
          <tr>
            <td>&lt;mark&gt;</td>
            <td>Defines marked/highlighted text</td>
          </tr>
          <tr>
            <td>&lt;nav&gt;</td>
            <td>Defines navigation links</td>
          </tr>
          <tr>
            <td>&lt;section&gt;</td>
            <td>Defines a section in a document</td>
          </tr>
          <tr>
            <td>&lt;summary&gt;</td>
            <td>Defines a visible heading for a &lt;details&gt; element</td>
          </tr>
          <tr>
            <td>&lt;time&gt;</td>
            <td>Defines a date/time</td>
          </tr>
        </table>
    </section>

    <section class="section">
      <h2 class="subheading">Elements and Tags</h2>
        <p class="text">An <b>element</b> includes the opening and closing
          tags and the content between them. Elements can also have <em>
          attributes</em>.</p>

        <p class="text">A <b>tag</b> is a command for the web browser that is
          set within angle brackets. Tags usually come in opening and closing
          pairs, but <em>void tags</em> do not have a closing tag. Tags can
          format text, create links, display images, and more. They can also
          have attributes with values.</p>

          Bold: &lt;b&gt;<b>bold</b>&lt;/b&gt; <br>
          Emphasis: &lt;em&gt;<em>emphasis</em>&lt;/em&gt;<br>
          Line Break &lpar;inline&rpar;: &lt;br&gt; - Inline elements violate
          other elements' personal space. <br>
          Paragraph &lpar;block&rpar;: &lt;p&gt;paragraph&lt;/p&gt; - Block
          elements have an "invisible" box around them. Like mimes. <br>
          Heading, where # is 1-6: &lt;h#&gt;heading&lt;/h#&gt;<br>
          Comment: &lt;!--Comments are not displayed by the browser.--&gt;
          <br>

      <p class="text"><b>Attributes</b> are special tags that set the
        properties of an HTML element.</p>

        Anchor &lpar;makes links&rpar;: &lt;a href="http://www.uaf.edu"&gt;<a 
        href="http://www.uaf.edu">University of Alaska Fairbanks</a>&lt;/a&gt;
        <br>

        Images: &lt;img src="http://www.alaska.edu/files/oit/oit_logo_horiz
        .png" alt="The UAF OIT Logo" title="The UAF OIT Logo"&gt; <br>
        <img class="image" src=
        "http://www.alaska.edu/files/oit/oit_logo_horiz.png" alt="The UAF
        OIT Logo" title="The UAF OIT Logo"> 

        SRC &lpar;source&rpar;: The location of the image.<br>
        ALT: What displays if the image cannot be loaded.<br>
        TITLE: The tooltip that appears when the mouse hovers over the image.
        <br>
    </section>

    <section class="section">
      <h2 class="subheading">HTML Document Formatting</h2>
        &lt;!DOCTYPE HTML&gt; - This tells the browser what the page is
        written in.<br>
        &lt;html&gt; - This surrounds the entire document.<br>
        &lt;head&gt; - This includes metadata like Java, CSS, etc. that isn't
        part of the website's content.<br>
        &lt;title&gt;title&lt;/title&gt; - This appears in the top of the
        browser or tab.<br>
        &lt;body&gt; - This is the actual stuff on the webpage.<br>
        &lt;/body&gt;<br>
        &lt;/html&gt;<br>
    </section>
  </article>

  <article class="category">
    <h1 class="heading">CSS: Cascading Style Sheets</h1>
      <p class="text">CSS is another language with syntax and rules. It gives
        HTML elements their style. Browsers have built-in style sheets, but
        that is superceded by the style sheet belonging to the website.</p>

    <section class="text">
      <h2 class="subheading">Vocabulary</h2>
          Cascading: Go down the rules until finding the most specific rule
          which overrides the other rules.<br>
          Style:
        <ol>
          <li>HTML Element: &lt;style&gt;div {color:blue;} &lt;/style&gt;
          </li>
          <li>HTML Attribute:  &lt;div style="color:blue;"&gt;<span style=
            "color:blue;">blue text</span>&lt;div&gt;</li>
          <li>Noun: The way a webpage looks.</li>
          <li>Verb: To make the webpage look a certain way.</li>
        </ol>
        Rule: A line of CSS code that describes the value that an attribute
        should take.<br>
        Property: The thing that is being changed.<br>
        Value: What the thing that is being changed is changed to.<br>
        Selector: The name of the HTML class or attribute that the properties
        belong to.<br>
        Class: A group of elements that are styled together. Cannot contain
        punctuation.<br>
        ID: The unique identifier of an HTML element.<br>
        <p class="text">Comment: &lt;/* This won't be displayed by the
          browser */&gt;<br>
    </section>

    <section class="section">
      <h2 class="subheading">Including CSS</h2>
      Best Practice: Create a separate CSS file and add &lt;link
      rel=”stylesheet” href=”filename.css”&gt;<br>
      Acceptable: Add &lt;style&gt; div { property:value }&lt;/style&gt; in
      the &lt;head&gt; section<br>
      Bad: CSS in individual HTML elements<br>
    </section>

    <section class="text">
      <h2 class="subheading">Properties</h2>
        <p class="text">Rules are applied not only to the specified element
          but to child elements which are beneath the parent element.<br>The
          following properties are inherited:</p>
        <ul>
          <li>color</li>
          <li>font</li>
          <li>letter-spacing</li>
          <li>line-height</li>
          <li>list-style</li>
          <li>text-align</li>
          <li>text-indent</li>
          <li>text-transform</li>
          <li>visibility</li>
          <li>white-space</li>
          <li>word-spacing</li>
        </ul>
        <p class="text">For a complete list of properties in CSS, check <a
          href="http://www.w3schools.com/cssref/">this reference</a>.<br>
        For Chrome and Safari, check the <a href=
        "http://trac.webkit.org/browser/trunk/Source/WebCore/css/html.css">
        default Webkit
        stylesheet</a>.<br>
        For Firefox, check the <a href=
        "http://hg.mozilla.org/mozilla-central/file/tip/layout/style/html.css"
        > default Mozilla stylesheet
      </a>.
        </p>
    </section>

    <section class="text">
      <h2 class="subheading">Structure</h2>
        <p class="text">Container elements are the boxes that content lives
          in. Every HTML element has four elements: content, padding,
          border, andmargin.<br>
          The size of an element/box is: Content + Padding + Border<br>
          It can be difficult to get the size of a box just right, so try two
          things:<p>
        <ol>
          <li>Set sizes in terms of percentages instead of pixels</li>
          <li>Se the box-sizing attribute to border-box</li>
        </ol>

          Content: The image or text that appears on the site<br>
          Division: &lt;div&gt;Defines a block in a document&lt;/div&gt;<br>
          Span: &lt;span&gt;Defines an in-line section of a document&lt;/span
          &gt;
          <br>
          Padding: Clears an area around the content and has the background
          color
          <br>
          Border: Goes around the padding and has the color of the box itself
          <br>
          Margin: Creates a transparent space between boxes by clearing the
          area around the border<br>

        <p class="text">Divisions default to the entire width of a page, but
          "display:flex;" will let divisions appear next to each other.<br>
          Check this <a href=
          "https://css-tricks.com/snippets/css/a-guide-to-flexbox/">guide to
          Flexbox</a> for details.</p>
    </section>
  </article>

  <article class="category">
    <h1 class="heading">Tips and Tricks</h1>
    <section class="section">
      <h2 class="subheading">Google is Your Friend</h2>
        <p class="text">There is too much for any programmer to remember.
          Rather than try to remember specific details &lpar;such as HTML
          character codes&rpar;, programmers focus on understanding how to code
          and why things work. You can look up the specifics.</p>
    </section>

    <section class="section">
      <h2 class="subheading">Methodology</h2>
        <img class="image" src=
        "http://s10.postimg.org/gv7gak78p/Code_Test_Refine.png" alt="Code >
        Test > Refine" title="The Development Cycle">
        <ol>
          <li>Break the design into boxes</li>
          <li>Look for repeated styles and semantics &lpar;which use tags&rpar;
            </li>
          <li>Write the HTML</li>
          <li>Apply styles &lpar;from biggest to smallest element&rpar; using
            CSS</li>
          <li>Test and fix</li>
        </ol>
      <p class="text">Remember that different browsers may display the same
        code differently, so test your code in multiple browsers.</p>
    </section>

    <section class="section">
      <h2 class="subheading">Check Your Work</h2>
        <a href="https://validator.w3.org/#validate_by_input">Validate your
          HTML.</a><br>
        <a href="http://jigsaw.w3.org/css-validator/#validate_by_input">
          Validate your CSS.</a><br>
    </section>
  </article>

  <article class="category">
    <h1 class="heading">Python</h1>
    <section class="section">
      <h2 class="subheading">Vocabulary</h2>
      Computer: A universal machine that can be programmed to do any
        computation<br>
      Expression: Something that has a value.<br>
      Program: What tells the computer what steps to take<br>
      Precise Squence of Steps: Series of instructions to accomplish a 
        task<br>
      High-Level Language: Input that works through an interpreter and not on
        the computer directly<br>
      Input: Programs that we write<br>
      Interpreter: Executes our programs on the computer<br>
    </section>
    
    <section>
      <h2 class="subheading">Natural Languages vs Code</h2>
      <p>Natural languages are ambiguous: Different people can interpret the
        same sentence to mean different things, but we want computers to
        interpret things the same way every time.</p>
      <p>Natural languages are verbose: It takes too many words to detail every
        step of even a simple action.</p>
      <p>Example: print 2 + 2 +<br>
        We can figure out what this means, but Python produces a syntax error.
        </p>
    </section>
    
    <section>
      <h2 class="subheading">Backus-Naur Form</h2>
      <p>The full Backus-Naur Form is pretty complicated, as this
      <a href="https://en.wikipedia.org/wiki/Backus%E2%80%93Naur_Form">
      Wikpedia article</a> shows, but the gist is that it use symbols to show
      how computer programming languages work. The gist of it is that 
      non-terminals &lpar;variables&rpar; are on the left side with an arrow 
      pointing towards their replacements which can be other variables, the 
      same variable, or terminals which have no replacements and never appear 
      on the left side of the form.</p>

      <p>A derivation is when you keep working down the expression until all of 
      the non-terminals are replaced by terminals. We can explain Python that 
      way.</p>
    </section>

    <section>
      <h2 class="subheading">Python Grammar for Arithmetic Expressions</h2>
      <table>
      <tr>
      <td>&lt;expression&gt;</td> <td>&rarr;</td> <td>&lt;expression&gt; 
        &lt;operator&gt; &lt;expression&gt;</td>
      </tr>
      <tr>
      <td>&lt;expression&gt;</td> <td>&rarr;</td> <td>&lt;number&gt;</td>
      </tr>
      <tr>
      <td>&lt;expression&gt;</td> <td>&rarr;</td> <td>&lpar; &lt;expression&gt;
        &rpar;</td>
      </tr>
      <tr>
      <td>&lt;operator&gt;</td> <td>&rarr;</td> <td>&plus;</td>
      </tr>
      <tr>
      <td>&lt;operator&gt;</td> <td>&rarr;</td> <td>&minus;</td>
      </tr>
      <tr>
      <td>&lt;operator&gt;</td> <td>&rarr;</td> <td>&midast;</td>
      </tr>
      <tr>
      <td>&lt;operator&gt;</td> <td>&rarr;</td> <td>&sol;</td>
      </tr>
      <tr>
      <td>&lt;number&gt;</td> <td>&rarr;</td> <td>0, 1, ...</td>
      </tr>
      </table>

      <p>Note: Python ignores the decimal &lpar;remainder&rpar; when you divide
        an integer by another integer. You need to give one of the variables a 
        decimal, even a .0, to get decimal results.</p>
    </section>

    <section>
      <h2 class="subheading">Variables</h2>
      <p>Variables make it easy to refer to expressions because rather than
        type the whole expression out again you can refer to its variable. It
        simultaneously labels the expression and lets you refer back to it
        to reduce the amount of repeat code.</p>

      <p>A 'magic number' is a number without a variable. Those are bad.</p>

      <p>You assign a value to a variable when you state what expression or 
        number it represents. You do that using &equals; which does not mean 
        "equals" like in math but is an arrow indicating that whatever is to 
        the right of the &equals; is the value of the variable on the left.</p>

      Arithmetic: 2 &plus; 3 &equals; 5<br>
      Python: my_variable &equals; 5<br>

      <p>The above is an example of an Assignment Statement: name &equals;
        expression</p>

      <p>Python will keep calculating and updating the value of a variable as
        it moves down the code.</p>

      <section class="code">
        <table>
        <tr>
        <td>days</td> <td>&equals;</td> <td>7 &midast; 7</td> 
          <td>&num; Result: 49</td>
        </tr>
        <tr>
        <td>days</td> <td>&equals;</td> <td>48</td> 
          <td>&num; Changes the value to 48</td>
        </tr>
        <tr>
        <td>days</td> <td>&equals;</td> <td>days &minus; 1</td> 
          <td>&num; Result: 48 - 1 = 47. Variable has a new value.</td>
        </tr>
        <tr>
        <td>days</td> <td>&equals;</td> <td>days &minus; 1</td>
          <td>&num; Result: 47 - 1 = 46</td>
        </tr>
        </table>
      </section>
    </section>

    <section>
      <h2 class="subheading">Strings</h2>
      <p>Python isn't just numbers. You can have sequences of characters called
      strings. Strings are enclosed in single or double quotes, &apos; or 
      &quote;, to delineate them from variables. It doesn't matter which you
      use so long as the string begins and ends with the same one.</p>

      <p>That means that<br>
      <span class="code">print 'Hello'<br></span>
      and<br>
      <span class="code">print "Hello"<br></span>
      have the same result: <span class="code">Hello<span></p>

      <p>You can add strings together which is called "concatenation", but you
      cannot concatenate strings and integers. You can multiple strings.</p>

      <section class="code">
        <p>name = "Corey"<br>
        print "Hello" + name + 10 * "!"<br>
        Result: Hello Corey!!!!!!!!!!</p>
      </section>

      <p>You can select the characters of a string, called 'indexing', by 
      putting an integer or expression in square brackets. The first character 
      in a string is 0 and count right. Negative numbers start at the end of 
      the string with -1 and count left.<p>

      <section class="code">
        <p>name = "Corey"<br>
        print name&lsqb;0&rsqb; &num; Result: C<br>
        print name&lsqb;2&rsqb; &num; Result: r<br>
        print name&lsqb;-1&rsqb; &num; Result: y</p>
      </section>

      <p>Trying to index a character that isn't in the string produces an 
        error:</p>

      <section class="code">IndexError: string out of range<section>

      <p>It is possible to index more than one character. You can specify a
        starting and stopping character

    </section>
</body>

</html>